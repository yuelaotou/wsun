<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.wsun">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<context:property-placeholder ignore-resource-not-found="true"
		location="classpath:/important.properties, classpath:/variable.properties" />

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.wsun.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wsun.repository" />
		<property name="annotationClass" value="com.wsun.repository.MyBatisRepository" />
	</bean>

	<!-- TransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- <aop:config proxy-target-class="true"> -->
	<!-- <aop:advisor pointcut="execution(* com.wsun.service..*.*(..))" advice-ref="txAdvice" /> -->
	<!-- </aop:config> -->

	<!-- 定义aspectj -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->

	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="add*" rollback-for="Throwable" propagation="REQUIRED" isolation="READ_COMMITTED" /> -->
	<!-- <tx:method name="insert*" rollback-for="Throwable" propagation="REQUIRED" isolation="READ_COMMITTED" /> -->
	<!-- <tx:method name="save*" rollback-for="Throwable" propagation="REQUIRED" isolation="READ_COMMITTED" /> -->
	<!-- <tx:method name="update*" rollback-for="Throwable" propagation="REQUIRED" isolation="READ_COMMITTED" /> -->
	<!-- <tx:method name="delete*" rollback-for="Throwable" propagation="REQUIRED" isolation="READ_COMMITTED" /> -->
	<!-- <tx:method name="*" propagation="SUPPORTS" isolation="READ_COMMITTED" read-only="true" /> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->

	<!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<property name="minIdle" value="0" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="600000" />
	</bean>

	<!-- Configuration -->
<!-- 	<bean id="configuration" class="com.wsun.common.utils.Configuration"> -->
<!-- 		<property name="prop"> -->
<!-- 			<ref bean="myPropertiesBean" /> -->
<!-- 		</property> -->
<!-- 	</bean> -->

<!-- 	<bean id="myPropertiesBean" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> -->
<!-- 		<property name="locations"> -->
<!-- 			<list> -->
<!-- 				<value>classpath*:important.properties</value> -->
<!-- 				<value>classpath*:variable.properties</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->


	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>

	<!-- 项目自定义的Realm, 所有userService依赖的mapper都需要用depends-on声明 -->
	<bean id="shiroDbRealm" class="com.wsun.service.ShiroDbRealm" >
		<property name="userService" ref="userService"/>
	</bean>

	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/" />
		<property name="filterChainDefinitions">
			<value>
				/login = authc
				/logout = logout
				/static/** = anon
				/admin/** = roles[admin]
				/** = user
			</value>
		</property>
	</bean>

	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:spring-ehcache.xml" />
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 支持 Shiro对Controller的方法级AOP安全控制 begin -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>